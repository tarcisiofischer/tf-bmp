/*
tf-BMP https://github.com/tarcisiofischer/tf-bmp

Licensed under the MIT License <http://opensource.org/licenses/MIT>.
SPDX-License-Identifier: MIT
Copyright (c) 2024 Tarcisio Fischer <tarcisio.fischer.cco@gmail.com>

Permission is hereby  granted, free of charge, to any  person obtaining a copy
of this software and associated  documentation files (the "Software"), to deal
in the Software  without restriction, including without  limitation the rights
to  use, copy,  modify, merge,  publish, distribute,  sublicense, and/or  sell
copies  of  the Software,  and  to  permit persons  to  whom  the Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE  IS PROVIDED "AS  IS", WITHOUT WARRANTY  OF ANY KIND,  EXPRESS OR
IMPLIED,  INCLUDING BUT  NOT  LIMITED TO  THE  WARRANTIES OF  MERCHANTABILITY,
FITNESS FOR  A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT  SHALL THE
AUTHORS  OR COPYRIGHT  HOLDERS  BE  LIABLE FOR  ANY  CLAIM,  DAMAGES OR  OTHER
LIABILITY, WHETHER IN AN ACTION OF  CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE  OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#ifndef TF_BMP_HPP
#define TF_BMP_HPP

#include <cstdint>
#include <vector>
#include <filesystem>
#include <expected>
#include <fstream>
#include <ostream>
#include <variant>

namespace tf::BMP {

enum class BPP {
    _1bit, _2bits, _4bits, _8bits,
    _16bits,
    _24bits, _32bits
};
template <BPP BitsPerPixel> struct BBPTraits {};
template <> struct BBPTraits<BPP::_1bit> {
    using data_type = uint8_t;
    static constexpr uint16_t nbits = 1;
};
template <> struct BBPTraits<BPP::_2bits> {
    using data_type = uint8_t;
    static constexpr uint16_t nbits = 2;
};
template <> struct BBPTraits<BPP::_4bits> {
    using data_type = uint8_t;
    static constexpr uint16_t nbits = 4;
};
template <> struct BBPTraits<BPP::_8bits> {
    using data_type = uint8_t;
    static constexpr uint16_t nbits = 8;
};
template <> struct BBPTraits<BPP::_16bits> {
    using data_type = uint16_t;
    static constexpr uint16_t nbits = 16;
};
template <> struct BBPTraits<BPP::_24bits> {
    using data_type = uint32_t;
    static constexpr uint16_t nbits = 24;
};
template <> struct BBPTraits<BPP::_32bits> {
    using data_type = uint32_t;
    static constexpr uint16_t nbits = 32;
};

template<BPP BitsPerPixel>
struct PixelArray {
    using pixel_t = BBPTraits<BitsPerPixel>::data_type;

    explicit PixelArray(uint32_t width, uint32_t height, std::initializer_list<pixel_t> data)
        : m_rawData(data)
        , m_width(width)
        , m_height(height)
    {}

    explicit PixelArray(uint32_t width, uint32_t height)
        : m_rawData(width * height)
        , m_width(width)
        , m_height(height)
    {}

    [[nodiscard]] uint32_t width() const { return m_width; }
    [[nodiscard]] uint32_t height() const { return m_height; }
    [[nodiscard]] uint32_t size() const { return m_width * m_height; }

    [[nodiscard]] pixel_t const& operator[](int32_t const r, int32_t const c) const
    {
        return m_rawData[_index(r, c)];
    }

    [[nodiscard]] pixel_t& operator[](int32_t const r, int32_t const c)
    {
        return m_rawData[_index(r, c)];
    }

    struct CircularView {
        explicit CircularView(PixelArray& pa) : paRef(pa) {}

        [[nodiscard]] pixel_t const& operator[](int32_t r, int32_t c) const
        {
            return paRef.m_rawData[_index(r, c)];
        }

        [[nodiscard]] pixel_t& operator[](int32_t r, int32_t c)
        {
            return paRef.m_rawData[_index(r, c)];
        }

    private:
        [[nodiscard]] int32_t _index(int32_t r, int32_t c) const {
            r %= static_cast<int32_t>(paRef.m_height);
            c %= static_cast<int32_t>(paRef.m_width);
            if (r < 0) r += paRef.m_height;
            if (c < 0) c += paRef.m_width;
            return r * static_cast<int32_t>(paRef.m_width) + c;
        }

        PixelArray& paRef;
    };

private:
    [[nodiscard]] int32_t _index(int32_t r, int32_t c) const {
        if (r < 0 || r >= static_cast<int32_t>(m_height)) {
            throw std::out_of_range{"Pixel row out of range"};
        }
        if (c < 0 || c >= static_cast<int32_t>(m_width)) {
            throw std::out_of_range{"Pixel column out of range"};
        }

        return r * static_cast<int32_t>(m_width) + c;
    }

    std::vector<pixel_t> m_rawData;
    uint32_t m_width;
    uint32_t m_height;
};

namespace _detail {
    void writePixelArrayBMP(std::ofstream &ofstream, PixelArray<BPP::_1bit> const& pa)
    { /* TODO */ }
    void writePixelArrayBMP(std::ofstream &ofstream, PixelArray<BPP::_2bits> const& pa)
    { /* TODO */ }
    void writePixelArrayBMP(std::ofstream &ofstream, PixelArray<BPP::_8bits> const& pa)
    { /* TODO */ }
    void writePixelArrayBMP(std::ofstream &ofstream, PixelArray<BPP::_16bits> const& pa)
    { /* TODO */ }

    void writePixelArrayBMP(std::ofstream &ofstream, PixelArray<BPP::_24bits> const& pa)
    {
        auto write24 = [&ofstream](uint32_t data) {
            ofstream.write(reinterpret_cast<const char*>(&data), 3);
        };

        auto n_padding_bytes = pa.width() % 4;
        for (int32_t i = 0; i < static_cast<int32_t>(pa.height()); ++i) {
            for (int32_t j = 0; j < static_cast<int32_t>(pa.width()); ++j) {
                auto raw_pixel = pa[static_cast<int32_t>(pa.height()) - 1 - i, j];
                write24(raw_pixel);
            }
            ofstream.write("\0\0\0\0", n_padding_bytes);
        }
    }

    void writePixelArrayBMP(std::ofstream &ofstream, PixelArray<BPP::_32bits> const& pa)
    { /* TODO */ }
}

enum class save_error {
    file_already_exists
};

template<BPP BitsPerPixel>
std::expected<void, save_error> save(
    PixelArray<BitsPerPixel> const& pa,
    std::filesystem::path const& outfile,
    bool overwrite=false
)
{
    if (!overwrite && std::filesystem::exists(outfile)) {
        return std::unexpected{save_error::file_already_exists};
    }

    auto ofstream = std::ofstream(outfile.string(), std::ios::binary);
    auto write16 = [&ofstream](uint16_t data) {
        ofstream.write(reinterpret_cast<const char*>(&data), sizeof(uint16_t));
    };
    auto write32 = [&ofstream](uint32_t data) {
        ofstream.write(reinterpret_cast<const char*>(&data), sizeof(uint32_t));
    };
    auto constexpr bmp_header_size = uint32_t{14}; // bytes
    auto constexpr dib_header_size = uint32_t{40}; // bytes
    auto const full_bitmap_size = pa.size() * uint32_t{sizeof(typename BBPTraits<BitsPerPixel>::data_type)};

    // Bitmap file header
    write16(0x4D'42); // BMP Signature
    write32(bmp_header_size + dib_header_size + full_bitmap_size); // Size of BMP file
    write16(0); // Reserved 1
    write16(0); // Reserved 2
    write32(54); // Offset (in bytes) to the Pixel Array data

    // DIB (Device Independent Bitmap) header
    write32(dib_header_size); // Size (in bytes) of the DIB header
    write32(pa.width()); // Image width
    write32(pa.height()); // Image height
    write16(1); // Number of color planes
    write16(BBPTraits<BitsPerPixel>::nbits); // Number of bits per pixel
    write32(0); // No pixel array compression used
    write32(full_bitmap_size); // Size (in bytes) of the raw bitmap data (including padding)

    write32(0); // (Not implemented) Print resolution of the image - pixels/metre horizontal
    write32(0); // (Not implemented) Print resolution of the image - pixels/metre vertical
    write32(0); // (Not implemented) Number of colors in the palette
    write32(0); // (Not implemented) Important colors

    _detail::writePixelArrayBMP(ofstream, pa); // Write actual pixel data

    ofstream.close();

    return {};
}


namespace _detail {
    template<BPP BitsPerPixel>
    PixelArray<BitsPerPixel> loadPixelArrayBMP(uint32_t width, uint32_t height, std::ifstream &ifstream);

    template<>
    PixelArray<BPP::_24bits> loadPixelArrayBMP<BPP::_24bits>(uint32_t width, uint32_t height, std::ifstream &ifstream)
    {
        auto read24 = [&ifstream]() {
            auto data = uint32_t{0};
            ifstream.read(reinterpret_cast<char*>(&data), 3);
            return data;
        };

        auto pa = PixelArray<BPP::_24bits>{width, height};
        auto n_padding_bytes = width % 4;
        for (int32_t i = 0; i < static_cast<int32_t>(height); ++i) {
            for (int32_t j = 0; j < static_cast<int32_t>(width); ++j) {
                pa[static_cast<int32_t>(height) - 1 - i, j] = read24();
            }
            // Ignore padding bytes
            ifstream.seekg(n_padding_bytes, std::ios_base::cur);
        }
        return pa;
    }
}

enum class load_error {
    file_not_found,
    invalid_bmp_file,
    file_format_unknown,
};

// Note: This looks like nonsense, but just experimenting...
std::expected<std::variant<
    PixelArray<BPP::_1bit>,
    PixelArray<BPP::_2bits>,
    PixelArray<BPP::_4bits>,
    PixelArray<BPP::_8bits>,
    PixelArray<BPP::_16bits>,
    PixelArray<BPP::_24bits>,
    PixelArray<BPP::_32bits>
>, load_error> load(std::filesystem::path const& infile)
{
    if (!std::filesystem::exists(infile)) {
        return std::unexpected{load_error::file_not_found};
    }

    auto ifstream = std::ifstream(infile.string(), std::ios::binary);
    auto read16 = [&ifstream]() {
        auto data = uint16_t{0};
        ifstream.read(reinterpret_cast<char*>(&data), sizeof(uint16_t));
        return data;
    };
    auto read32 = [&ifstream]() {
        auto data = uint32_t{0};
        ifstream.read(reinterpret_cast<char*>(&data), sizeof(uint32_t));
        return data;
    };

    // Bitmap file header
    if (read16() != 0x4D'42) {
        return std::unexpected{load_error::invalid_bmp_file};
    }
    ifstream.seekg(0x12); // Jump to the width of the bitmap in pixels
    auto width = read32();
    auto height = read32();
    ifstream.seekg(0x1C); // Jump to the number of bits per pixel (BPP)
    auto nbits = read16();

    ifstream.seekg(0x36); // Jump to the start of pixel array

    switch (nbits) {
        case 24:
            auto pa = _detail::loadPixelArrayBMP<BPP::_24bits>(width, height, ifstream);
            ifstream.close();
            return pa;
    }

    return std::unexpected{load_error::file_format_unknown};
}

}

#endif // TF_BMP_HPP
